/users:
  get:
    summary: Get all users
    tags: [Users]
    security:
      - BearerAuth: []
    responses:
      200:
        description: List of all users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
  
  post:
    summary: Create a new user
    tags: [Users]
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
              - password
              - name
            properties:
              username:
                type: string
              password:
                type: string
                format: password
              name:
                type: string
              email:
                type: string
                format: email
              role:
                type: string
                enum: [admin, editor, viewer]
    responses:
      201:
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      400:
        description: Missing required fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      409:
        description: Username already exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/users/{id}:
  get:
    summary: Get user by ID
    tags: [Users]
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      200:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFoundError'
  
  put:
    summary: Update a user
    tags: [Users]
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              name:
                type: string
              email:
                type: string
                format: email
              role:
                type: string
                enum: [admin, editor, viewer]
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      400:
        description: Invalid request data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFoundError'
      409:
        description: Username already exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  
  delete:
    summary: Delete a user
    tags: [Users]
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      204:
        description: User deleted successfully
      400:
        description: Cannot delete the last admin user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFoundError'
